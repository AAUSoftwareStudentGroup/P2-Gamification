(function(){"use strict";Bridge.define("ThreeOneSevenBee.Model.Expression.ExpressionRules.Rules",{statics:{itselfRule:function(expression,selection,identity){return identity.v=expression,!0},commutativeRule:function(expression,selection,identity){var $t,operatorExpression,serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer;if(Bridge.hasValue(($t=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),operatorExpression=$t,$t))){if(operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.add)return identity.v=serializer.deserialize(serializer.serialize(operatorExpression.getRight())+"+"+serializer.serialize(operatorExpression.getLeft())),!0;if(operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.multiply)return identity.v=serializer.deserialize(serializer.serialize(operatorExpression.getRight())+"*"+serializer.serialize(operatorExpression.getLeft())),!0}return identity.v=null,!1},inversePowerRule:function(expression,selection,identity){var $t,operatorExpression,serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer;if(identity.v=null,Bridge.hasValue(($t=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),operatorExpression=$t,$t))&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.power&&Bridge.is(operatorExpression.getRight(),ThreeOneSevenBee.Model.Expression.Expressions.UnaryMinusExpression)){var power=Bridge.as(operatorExpression.getRight(),ThreeOneSevenBee.Model.Expression.Expressions.UnaryMinusExpression),newDivision=Bridge.as(serializer.deserialize("1/b"),ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),newPower=Bridge.as(serializer.deserialize("a^b"),ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression);return newPower.setLeft(operatorExpression.getLeft()),newPower.setRight(power.getExpression()),newDivision.setRight(newPower),identity.v=newDivision,!0}return!1},powerZeroRule:function(expression,selection,identity){var $t,operatorExpression,serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer;return Bridge.hasValue(($t=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),operatorExpression=$t,$t))&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.power&&Bridge.String.equals(operatorExpression.getRight().getValue(),"0")?(identity.v=serializer.deserialize("1"),!0):(identity.v=null,!1)},fractionAddRule:function(expression,selection,identity){var $t,$t1,$t2,operatorExpression,serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,lefthand,righthand,newDivision,newAddition;return Bridge.hasValue(($t=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),operatorExpression=$t,$t))&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.add&&Bridge.hasValue(($t1=Bridge.as(operatorExpression.getLeft(),ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),lefthand=$t1,$t1))&&Bridge.hasValue(($t2=Bridge.as(operatorExpression.getRight(),ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),righthand=$t2,$t2))&&lefthand.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.divide&&righthand.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.divide&&lefthand.getRight()===righthand.getRight()?(newDivision=Bridge.as(serializer.deserialize("a/b"),ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),newAddition=Bridge.as(serializer.deserialize("a+b"),ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),newAddition.setLeft(lefthand.getLeft()),newAddition.setRight(righthand.getLeft()),newDivision.setLeft(newAddition),newDivision.setRight(lefthand.getRight()),identity.v=newDivision,!0):(identity.v=null,!1)},fractionMultiplyRule:function(expression,selection,identity){var $t,$t1,$t2,operatorExpression,serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,lefthand,righthand,division;return Bridge.hasValue(($t=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),operatorExpression=$t,$t))&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.multiply&&Bridge.hasValue(($t1=Bridge.as(operatorExpression.getLeft(),ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),lefthand=$t1,$t1))&&Bridge.hasValue(($t2=Bridge.as(operatorExpression.getRight(),ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),righthand=$t2,$t2))&&lefthand.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.divide&&righthand.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.divide?(division=Bridge.as(serializer.deserialize("a/b"),ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),division.setLeft(serializer.deserialize(serializer.serialize(lefthand.getLeft())+"*"+serializer.serialize(righthand.getLeft()))),division.setRight(serializer.deserialize(serializer.serialize(lefthand.getRight())+"*"+serializer.serialize(righthand.getRight()))),identity.v=division,!0):(identity.v=null,!1)},sameVariableDifferentExpMultiplyRule:function(expression,selection,identity){var $t,$t1,$t2,operatorExpression,serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,lefthand,righthand;return Bridge.hasValue(($t=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),operatorExpression=$t,$t))&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.multiply&&Bridge.hasValue(($t1=Bridge.as(operatorExpression.getLeft(),ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),lefthand=$t1,$t1))&&Bridge.hasValue(($t2=Bridge.as(operatorExpression.getRight(),ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),righthand=$t2,$t2))&&lefthand.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.power&&righthand.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.power&&lefthand.getLeft()===righthand.getLeft()?(identity.v=serializer.deserialize(serializer.serialize(lefthand.getLeft())+"^"+serializer.serialize(lefthand.getRight())+"+"+serializer.serialize(righthand.getRight())),!0):(identity.v=null,!1)},variableWithTwoExponent:function(expression,selection,identity){var $t,$t1,operatorExpression,serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,lefthand;return Bridge.hasValue(($t=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),operatorExpression=$t,$t))&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.power&&Bridge.hasValue(($t1=Bridge.as(operatorExpression.getLeft(),ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),lefthand=$t1,$t1))&&lefthand.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.power?(identity.v=serializer.deserialize(serializer.serialize(lefthand.getLeft())+"^"+serializer.serialize(lefthand.getRight())+"*"+serializer.serialize(operatorExpression.getRight())),!0):(identity.v=null,!1)},squareSentenceRule:function(expression,selection,identity){var $t,$t1,operatorExpression,serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,lefthand;return Bridge.hasValue(($t=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),operatorExpression=$t,$t))&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.power&&Bridge.String.equals(operatorExpression.getRight().getValue(),"2")&&Bridge.hasValue(($t1=Bridge.as(operatorExpression.getLeft(),ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),lefthand=$t1,$t1))&&lefthand.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.add?(identity.v=serializer.deserialize(serializer.serialize(lefthand.getLeft())+"^"+serializer.serialize(operatorExpression.getRight())+"+"+serializer.serialize(lefthand.getRight())+"^"+serializer.serialize(operatorExpression.getRight())+"+"+serializer.serialize(operatorExpression.getRight())+"*"+serializer.serialize(lefthand.getLeft())+"*"+serializer.serialize(lefthand.getRight())),!0):(identity.v=null,!1)},squareRootAndPowerRule:function(expression,selection,identity){var $t,$t1,$t2,functionExpression,serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,operatorExpression,delimiterExpression;return Bridge.hasValue(($t=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.FunctionExpression),functionExpression=$t,$t))&&functionExpression.getFunction()==="sqrt"&&Bridge.hasValue(($t1=Bridge.as(functionExpression.getExpression(),ThreeOneSevenBee.Model.Expression.Expressions.DelimiterExpression),delimiterExpression=$t1,$t1))&&Bridge.hasValue(($t2=Bridge.as(delimiterExpression.getExpression(),ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),operatorExpression=$t2,$t2))&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.power&&Bridge.String.equals(operatorExpression.getRight().getValue(),"2")?(identity.v=operatorExpression.getLeft(),!0):(identity.v=null,!1)},fractionVariableMultiplyRule:function(expression,selection,identity){var $t,$t1,operatorExpression,serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,righthand;return Bridge.hasValue(($t=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),operatorExpression=$t,$t))&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.multiply&&Bridge.hasValue(($t1=Bridge.as(operatorExpression.getRight(),ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),righthand=$t1,$t1))&&righthand.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.divide?(identity.v=serializer.deserialize("a/"+serializer.serialize(righthand.getLeft())),identity.v.replace(serializer.deserialize("a"),serializer.deserialize(serializer.serialize(operatorExpression.getLeft())+"*"+serializer.serialize(righthand.getLeft()))),!0):(identity.v=null,!1)},multiplyVariableIntoParentheses:function(expression,selection,identity){var $t,$t1,operatorExpression,serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,righthand;return Bridge.hasValue(($t=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),operatorExpression=$t,$t))&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.multiply&&Bridge.hasValue(($t1=Bridge.as(operatorExpression.getRight(),ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),righthand=$t1,$t1))&&righthand.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.multiply?(identity.v=serializer.deserialize(serializer.serialize(operatorExpression.getLeft())+"*"+serializer.serialize(righthand.getLeft())+"+"+serializer.serialize(operatorExpression.getLeft())+"*"+serializer.serialize(righthand.getRight())),!0):(identity.v=null,!1)},powerOfVariablesMultiplied:function(expression,selection,identity){var $t,$t1,operatorExpression,serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,lefthand;return Bridge.hasValue(($t=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),operatorExpression=$t,$t))&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.power&&Bridge.hasValue(($t1=Bridge.as(operatorExpression.getRight(),ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),lefthand=$t1,$t1))&&lefthand.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.multiply?(identity.v=serializer.deserialize(serializer.serialize(lefthand.getLeft())+"^"+serializer.serialize(operatorExpression.getRight())+"+"+serializer.serialize(lefthand.getRight())+"^"+serializer.serialize(operatorExpression.getRight())),!0):(identity.v=null,!1)},multiplyingWithOneRule:function(expression,selection,identity){var $t,operatorExpression,serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer;if(Bridge.hasValue(($t=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),operatorExpression=$t,$t))){if(operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.multiply&&Bridge.String.equals(operatorExpression.getLeft().getValue(),"1"))return identity.v=operatorExpression.getRight(),!0;if(operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.multiply&&Bridge.String.equals(operatorExpression.getRight().getValue(),"1"))return identity.v=operatorExpression.getLeft(),!0}return identity.v=null,!1},denumeratorIsOneRule:function(expression,selection,identity){var $t,operatorExpression,serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer;return Bridge.hasValue(($t=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),operatorExpression=$t,$t))&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.divide&&Bridge.String.equals(operatorExpression.getRight().getValue(),"1")?(identity.v=operatorExpression.getLeft(),!0):(identity.v=null,!1)},numeratorIsZero:function(expression,selection,identity){var $t,operatorExpression,serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer;return Bridge.hasValue(($t=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),operatorExpression=$t,$t))&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.divide&&Bridge.String.equals(operatorExpression.getLeft().getValue(),"0")?(identity.v=serializer.deserialize("0"),!0):(identity.v=null,!1)},removingUnaryMinusInDivisionRule:function(expression,selection,identity){var $t,operatorExpression,serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,terminal,terminal2;return Bridge.hasValue(($t=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),operatorExpression=$t,$t))&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.divide&&Bridge.is(operatorExpression.getLeft(),ThreeOneSevenBee.Model.Expression.Expressions.UnaryMinusExpression)&&Bridge.is(operatorExpression.getRight(),ThreeOneSevenBee.Model.Expression.Expressions.UnaryMinusExpression)?(terminal=Bridge.as(operatorExpression.getLeft(),ThreeOneSevenBee.Model.Expression.Expressions.UnaryMinusExpression),terminal2=Bridge.as(operatorExpression.getRight(),ThreeOneSevenBee.Model.Expression.Expressions.UnaryMinusExpression),identity.v=serializer.deserialize(serializer.serialize(terminal.getExpression())+"/"+terminal2.getExpression()),!0):(identity.v=null,!1)},doubleMinusEqualsPlus:function(expression,selection,identity){var $t,$t1,operatorExpression,unary1,serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer;return Bridge.hasValue(($t=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.UnaryMinusExpression),operatorExpression=$t,$t))&&Bridge.hasValue(($t1=Bridge.as(operatorExpression.getExpression(),ThreeOneSevenBee.Model.Expression.Expressions.UnaryMinusExpression),unary1=$t1,$t1))?(identity.v=serializer.deserialize(serializer.serialize(unary1.getExpression())),!0):(identity.v=null,!1)}}});Bridge.init()})(this);