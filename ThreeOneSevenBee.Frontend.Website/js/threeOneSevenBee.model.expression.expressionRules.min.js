(function(){"use strict";Bridge.define("ThreeOneSevenBee.Model.Expression.ExpressionRules.Rules",{statics:{itselfRule:function(expression,selection,identity){return identity.v=expression.clone(),!0},commutativeRule:function(expression,selection,identity){var operatorExpression=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),serializer;if(Bridge.hasValue(operatorExpression)){if(serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.add)return identity.v=serializer.deserialize(serializer.serialize(operatorExpression.getRight())+"+"+serializer.serialize(operatorExpression.getLeft())),!0;if(operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.multiply)return identity.v=serializer.deserialize(serializer.serialize(operatorExpression.getRight())+"*"+serializer.serialize(operatorExpression.getLeft())),!0}return identity.v=null,!1},inversePowerRule:function(expression,selection,identity){var operatorExpression=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression);if(Bridge.hasValue(operatorExpression)&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.power&&Bridge.is(operatorExpression.getRight(),ThreeOneSevenBee.Model.Expression.Expressions.UnaryMinusExpression)){var serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,power=Bridge.as(operatorExpression.getRight(),ThreeOneSevenBee.Model.Expression.Expressions.UnaryMinusExpression),newDivision=Bridge.as(serializer.deserialize("1/b"),ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),newPower=Bridge.as(serializer.deserialize("a^b"),ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression);return newPower.setLeft(operatorExpression.getLeft()),newPower.setRight(power.getExpression()),newDivision.setRight(newPower),identity.v=newDivision,!0}return identity.v=null,!1},powerZeroRule:function(expression,selection,identity){var operatorExpression=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),serializer;return Bridge.hasValue(operatorExpression)&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.power&&Bridge.String.equals(operatorExpression.getRight().getValue(),"0")?(serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,identity.v=serializer.deserialize("1"),!0):(identity.v=null,!1)},fractionAddRule:function(expression,selection,identity){var operatorExpression=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),lefthand,righthand;if(Bridge.hasValue(operatorExpression)&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.add&&(lefthand=Bridge.as(operatorExpression.getLeft(),ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),righthand=Bridge.as(operatorExpression.getRight(),ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),Bridge.hasValue(lefthand)&&Bridge.hasValue(righthand)&&lefthand.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.divide&&righthand.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.divide&&lefthand.getRight().getValue()===righthand.getRight().getValue())){var serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,newDivision=Bridge.as(serializer.deserialize("a/b"),ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),newAddition=Bridge.as(serializer.deserialize("a+b"),ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression);return newAddition.setLeft(lefthand.getLeft()),newAddition.setRight(righthand.getLeft()),newDivision.setLeft(newAddition),newDivision.setRight(lefthand.getRight()),identity.v=newDivision,!0}return identity.v=null,!1},fractionMultiplyRule:function(expression,selection,identity){var operatorExpression=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),lefthand,righthand,serializer,division;return Bridge.hasValue(operatorExpression)&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.multiply&&(lefthand=Bridge.as(operatorExpression.getLeft(),ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),righthand=Bridge.as(operatorExpression.getRight(),ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),Bridge.hasValue(lefthand)&&Bridge.hasValue(righthand)&&lefthand.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.divide&&righthand.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.divide)?(serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,division=Bridge.as(serializer.deserialize("a/b"),ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),division.setLeft(serializer.deserialize(serializer.serialize(lefthand.getLeft())+"*"+serializer.serialize(righthand.getLeft()))),division.setRight(serializer.deserialize(serializer.serialize(lefthand.getRight())+"*"+serializer.serialize(righthand.getRight()))),identity.v=division,!0):(identity.v=null,!1)},sameVariableDifferentExpMultiplyRule:function(expression,selection,identity){var operatorExpression=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),lefthand,righthand,serializer;return Bridge.hasValue(operatorExpression)&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.multiply&&(lefthand=Bridge.as(operatorExpression.getLeft(),ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),righthand=Bridge.as(operatorExpression.getRight(),ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),Bridge.hasValue(lefthand)&&Bridge.hasValue(righthand)&&lefthand.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.power&&righthand.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.power&&lefthand.getLeft().getValue()===righthand.getLeft().getValue())?(serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,identity.v=serializer.deserialize(serializer.serialize(lefthand.getLeft())+"^"+lefthand.getRight()+"+"+righthand.getRight()),!0):(identity.v=null,!1)},variableWithTwoExponent:function(expression,selection,identity){var operatorExpression=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),righthand,serializer;return Bridge.hasValue(operatorExpression)&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.power&&(righthand=Bridge.as(operatorExpression.getRight(),ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),Bridge.hasValue(righthand)&&righthand.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.power)?(serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,identity.v=serializer.deserialize(serializer.serialize(operatorExpression.getLeft())+"^"+serializer.serialize(righthand.getLeft())+"*"+serializer.serialize(righthand.getRight())),!0):(identity.v=null,!1)},squareSentenceRule:function(expression,selection,identity){var operatorExpression=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),lefthand,serializer;return Bridge.hasValue(operatorExpression)&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.power&&Bridge.String.equals(operatorExpression.getRight().getValue(),"2")&&(lefthand=Bridge.as(operatorExpression.getLeft(),ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),Bridge.hasValue(lefthand)&&lefthand.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.add)?(serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,identity.v=serializer.deserialize(serializer.serialize(lefthand.getLeft())+"^"+serializer.serialize(operatorExpression.getRight())+"+"+serializer.serialize(lefthand.getRight())+"^"+serializer.serialize(operatorExpression.getRight())+"+"+serializer.serialize(operatorExpression.getRight())+"*"+serializer.serialize(lefthand.getLeft())+"*"+serializer.serialize(lefthand.getRight())),!0):(identity.v=null,!1)},squareRootAndPowerRule:function(expression,selection,identity){var $t,functionExpression=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.FunctionExpression),operatorExpression,delimiterExpression=Bridge.as(functionExpression.getExpression(),ThreeOneSevenBee.Model.Expression.Expressions.DelimiterExpression);return Bridge.hasValue(functionExpression)&&functionExpression.getFunction()==="sqrt"&&Bridge.hasValue(delimiterExpression)&&Bridge.hasValue(($t=Bridge.as(delimiterExpression.getExpression(),ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),operatorExpression=$t,$t))&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.power&&Bridge.String.equals(operatorExpression.getRight().getValue(),"2")?(identity.v=operatorExpression.getLeft(),!0):(identity.v=null,!1)},fractionVariableMultiplyRule:function(expression,selection,identity){var operatorExpression=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),righthand,serializer;return Bridge.hasValue(operatorExpression)&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.multiply&&(righthand=Bridge.as(operatorExpression.getRight(),ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),Bridge.hasValue(righthand)&&righthand.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.divide)?(serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,identity.v=serializer.deserialize("a/"+serializer.serialize(righthand.getLeft())),identity.v.replace(serializer.deserialize("a"),serializer.deserialize(serializer.serialize(operatorExpression.getLeft())+"*"+serializer.serialize(righthand.getLeft()))),!0):(identity.v=null,!1)},multiplyVariableIntoParentheses:function(expression,selection,identity){var operatorExpression=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),righthand,serializer;return Bridge.hasValue(operatorExpression)&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.multiply&&(righthand=Bridge.as(operatorExpression.getRight(),ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),Bridge.hasValue(righthand)&&righthand.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.multiply)?(serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,identity.v=serializer.deserialize(serializer.serialize(operatorExpression.getLeft())+"*"+serializer.serialize(righthand.getLeft())+"+"+serializer.serialize(operatorExpression.getLeft())+"*"+serializer.serialize(righthand.getRight())),!0):(identity.v=null,!1)},multiplyingWithOneRule:function(expression,selection,identity){var operatorExpression=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression);if(Bridge.hasValue(operatorExpression)){if(operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.multiply&&Bridge.String.equals(operatorExpression.getLeft().getValue(),"1"))return identity.v=operatorExpression.getRight(),!0;if(operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.multiply&&Bridge.String.equals(operatorExpression.getRight().getValue(),"1"))return identity.v=operatorExpression.getLeft(),!0}return identity.v=null,!1},denumeratorIsOneRule:function(expression,selection,identity){var operatorExpression=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression);return Bridge.hasValue(operatorExpression)&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.divide&&Bridge.String.equals(operatorExpression.getRight().getValue(),"1")?(identity.v=operatorExpression.getLeft(),!0):(identity.v=null,!1)},numeratorIsZero:function(expression,selection,identity){var operatorExpression=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression),serializer;return Bridge.hasValue(operatorExpression)&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.divide&&Bridge.String.equals(operatorExpression.getLeft().getValue(),"0")?(serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,identity.v=serializer.deserialize("0"),!0):(identity.v=null,!1)},removingUnaryMinusInDivisionRule:function(expression,selection,identity){var operatorExpression=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.OperatorExpression);if(Bridge.hasValue(operatorExpression)&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.divide&&Bridge.is(operatorExpression.getLeft(),ThreeOneSevenBee.Model.Expression.Expressions.UnaryMinusExpression)&&Bridge.is(operatorExpression.getRight(),ThreeOneSevenBee.Model.Expression.Expressions.UnaryMinusExpression)){var serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,terminal=Bridge.as(operatorExpression.getLeft(),ThreeOneSevenBee.Model.Expression.Expressions.UnaryMinusExpression),terminal2=Bridge.as(operatorExpression.getRight(),ThreeOneSevenBee.Model.Expression.Expressions.UnaryMinusExpression);return identity.v=serializer.deserialize(serializer.serialize(terminal.getExpression())+"/"+terminal2.getExpression()),!0}return identity.v=null,!1},doubleMinusEqualsPlus:function(expression,selection,identity){var $t,operatorExpression=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.UnaryMinusExpression),unary1,serializer;return Bridge.hasValue(operatorExpression)&&Bridge.hasValue(($t=Bridge.as(operatorExpression.getExpression(),ThreeOneSevenBee.Model.Expression.Expressions.UnaryMinusExpression),unary1=$t,$t))?(serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,identity.v=serializer.deserialize(serializer.serialize(unary1.getExpression())),!0):(identity.v=null,!1)}}});Bridge.init()})(this);