(function(){"use strict";Bridge.define("ThreeOneSevenBee.Model.Expression.ExpressionRules.Rules",{statics:{checkParentPaths:function(checkString,expressions){var $t,expression,parentPath,index,varExpr,minusExpr,variadicExpr,binaryExpr;for(expressions===void 0&&(expressions=[]),$t=Bridge.getEnumerator(expressions);$t.moveNext();){if(expression=$t.getCurrent(),parentPath=Bridge.Linq.Enumerable.from(expression.getParentPath()).toList(ThreeOneSevenBee.Model.Expression.ExpressionBase),parentPath.getCount()!==checkString.length)return!1;for(index=0;index<parentPath.getCount();index++){var expr=parentPath.getItem(index),c=checkString.charCodeAt(index),numExpr=Bridge.as(expr,ThreeOneSevenBee.Model.Expression.Expressions.NumericExpression);if(Bridge.hasValue(numExpr)&&c!==110&&c!==108||(varExpr=Bridge.as(expr,ThreeOneSevenBee.Model.Expression.Expressions.VariableExpression),Bridge.hasValue(varExpr)&&c!==118&&c!==108)||(minusExpr=Bridge.as(expr,ThreeOneSevenBee.Model.Expression.Expressions.UnaryMinusExpression),Bridge.hasValue(minusExpr)&&c!==95)||(variadicExpr=Bridge.as(expr,ThreeOneSevenBee.Model.Expression.Expressions.VariadicOperatorExpression),Bridge.hasValue(variadicExpr)&&(variadicExpr.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.add&&c!==43||variadicExpr.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.multiply&&c!==42))||(binaryExpr=Bridge.as(expr,ThreeOneSevenBee.Model.Expression.Expressions.BinaryOperatorExpression),Bridge.hasValue(binaryExpr)&&(binaryExpr.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.divide&&c!==47||binaryExpr.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.power&&c!==94||binaryExpr.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.subtract&&c!==45)))return!1}}return!0},allEqual:function(expressions){if(expressions.getCount()<1)return!1;for(var i=1;i<expressions.getCount();i++)if(ThreeOneSevenBee.Model.Expression.ExpressionBase.op_Inequality(expressions.getItem(i-1),expressions.getItem(i)))return!1;return!0},divideRule:function(expression,selection,identity){var index,index1;if(selection.getCount()>0&&selection.getCount()%2==0&&Bridge.get(ThreeOneSevenBee.Model.Expression.ExpressionRules.Rules).allEqual(selection)&&Bridge.get(ThreeOneSevenBee.Model.Expression.ExpressionRules.Rules).checkParentPaths("l*/",selection.toArray())){var fraction=Bridge.as(selection.getItem(0).getParent().getParent(),ThreeOneSevenBee.Model.Expression.Expressions.BinaryExpression),left=Bridge.as(fraction.getLeft(),ThreeOneSevenBee.Model.Expression.Expressions.VariadicOperatorExpression),right=Bridge.as(fraction.getRight(),ThreeOneSevenBee.Model.Expression.Expressions.VariadicOperatorExpression),leftIndexes=Bridge.Linq.Enumerable.from(selection).select(function(e){return left.indexOfReference(e)}).where($_.ThreeOneSevenBee.Model.Expression.ExpressionRules.Rules.f1).toList(Bridge.Int),rightIndexes=Bridge.Linq.Enumerable.from(selection).select(function(e){return right.indexOfReference(e)}).where($_.ThreeOneSevenBee.Model.Expression.ExpressionRules.Rules.f1).toList(Bridge.Int);if(leftIndexes.getCount()===rightIndexes.getCount()){leftIndexes.sort();rightIndexes.sort();var temp=Bridge.as(expression.clone(),ThreeOneSevenBee.Model.Expression.Expressions.BinaryExpression),tempLeft=Bridge.as(temp.getLeft(),ThreeOneSevenBee.Model.Expression.Expressions.VariadicOperatorExpression),tempRight=Bridge.as(temp.getRight(),ThreeOneSevenBee.Model.Expression.Expressions.VariadicOperatorExpression);for(index=0;index<leftIndexes.getCount();index++)tempLeft.removeAt(leftIndexes.getItem(index)-index);for(index1=0;index1<rightIndexes.getCount();index1++)tempRight.removeAt(rightIndexes.getItem(index1)-index1);return identity.v=temp,!0}}return identity.v=null,!1},itselfRule:function(expression,selection,identity){return identity.v=expression.clone(),!0},productToExponentRule:function(expression,selection,identity){var operatorExpression=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.VariadicOperatorExpression),index,indexes,index1,selctionIndex,temp,index2;if(Bridge.hasValue(operatorExpression)&&selection.getCount()>0&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.multiply){for(index=0;index<selection.getCount();index++)if(selection.getItem(index).getParent()===operatorExpression==!1||index>0&&ThreeOneSevenBee.Model.Expression.ExpressionBase.op_Inequality(selection.getItem(index-1),selection.getItem(index)))return identity.v=null,!1;for(indexes=new Bridge.List$1(Bridge.Int)(),index1=0;index1<operatorExpression.getCount();index1++)for(selctionIndex=0;selctionIndex<selection.getCount();selctionIndex++)operatorExpression.getItem(index1)===selection.getItem(selctionIndex)&&indexes.add(index1);for(temp=Bridge.as(operatorExpression.clone(),ThreeOneSevenBee.Model.Expression.Expressions.VariadicOperatorExpression),index2=1;index2<indexes.getCount();index2++)temp.removeAt(indexes.getItem(index2)-index2+1);return temp.setItem(indexes.getItem(0),new ThreeOneSevenBee.Model.Expression.Expressions.BinaryOperatorExpression(selection.getItem(0).clone(),new ThreeOneSevenBee.Model.Expression.Expressions.NumericExpression(selection.getCount()),ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.power)),temp.getItem(indexes.getItem(0)).setParent(temp),identity.v=temp,!0}return identity.v=null,!1},exponentToProductRule:function(expression,selection,identity){var binaryExpression=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.BinaryExpression),numericExpression,temp,n;if(Bridge.hasValue(binaryExpression)&&(selection.getCount()===2&&ThreeOneSevenBee.Model.Expression.ExpressionBase.op_Equality(selection.getItem(0),binaryExpression.getLeft())&&ThreeOneSevenBee.Model.Expression.ExpressionBase.op_Equality(selection.getItem(1),binaryExpression.getRight())||ThreeOneSevenBee.Model.Expression.ExpressionBase.op_Equality(selection.getItem(1),binaryExpression.getLeft())&&ThreeOneSevenBee.Model.Expression.ExpressionBase.op_Equality(selection.getItem(0),binaryExpression.getRight()))&&(numericExpression=Bridge.as(binaryExpression.getRight(),ThreeOneSevenBee.Model.Expression.Expressions.NumericExpression),Bridge.hasValue(numericExpression))){if(numericExpression.getValue()==="0")identity.v=new ThreeOneSevenBee.Model.Expression.Expressions.NumericExpression(1);else if(numericExpression.getValue()==="1")identity.v=binaryExpression.getLeft().clone();else{for(temp=new ThreeOneSevenBee.Model.Expression.Expressions.VariadicOperatorExpression("constructor",ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.multiply,binaryExpression.getLeft().clone(),binaryExpression.getLeft().clone()),n=2;n<numericExpression.number;n++)temp.add(binaryExpression.getLeft().clone());identity.v=temp}return!0}return identity.v=null,!1},commutativeRule:function(expression,selection,identity){var operatorExpression=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.VariadicOperatorExpression),serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,temp,index;if(Bridge.hasValue(operatorExpression)&&selection.getCount()===2&&(operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.add||operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.multiply)&&ThreeOneSevenBee.Model.Expression.ExpressionBase.op_Equality(selection.getItem(0).getParent(),expression)&&ThreeOneSevenBee.Model.Expression.ExpressionBase.op_Equality(selection.getItem(1).getParent(),expression)){for(temp=Bridge.as(operatorExpression.clone(),ThreeOneSevenBee.Model.Expression.Expressions.VariadicOperatorExpression),index=0;index<operatorExpression.getCount();index++)operatorExpression.getItem(index)===selection.getItem(0)&&temp.setItem(index,selection.getItem(1).clone()),operatorExpression.getItem(index)===selection.getItem(1)&&temp.setItem(index,selection.getItem(0).clone()),temp.getItem(index).setParent(temp);return identity.v=temp,!0}return identity.v=null,!1},inversePowerRule:function(expression,selection,identity){var $t,operatorExpression,serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer;if(identity.v=null,Bridge.hasValue(($t=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.BinaryOperatorExpression),operatorExpression=$t,$t))&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.power&&Bridge.is(operatorExpression.getRight(),ThreeOneSevenBee.Model.Expression.Expressions.UnaryMinusExpression)){var power=Bridge.as(operatorExpression.getRight(),ThreeOneSevenBee.Model.Expression.Expressions.UnaryMinusExpression),newDivision=Bridge.as(serializer.deserialize("1/b"),ThreeOneSevenBee.Model.Expression.Expressions.BinaryOperatorExpression),newPower=Bridge.as(serializer.deserialize("a^b"),ThreeOneSevenBee.Model.Expression.Expressions.BinaryOperatorExpression);return newPower.setLeft(operatorExpression.getLeft()),newPower.setRight(power.getExpression()),newDivision.setRight(newPower),identity.v=newDivision,!0}return!1},powerZeroRule:function(expression,selection,identity){var $t,operatorExpression,serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer;return Bridge.hasValue(($t=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.BinaryOperatorExpression),operatorExpression=$t,$t))&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.power&&Bridge.String.equals(operatorExpression.getRight().getValue(),"0")?(identity.v=serializer.deserialize("1"),!0):(identity.v=null,!1)},fractionAddRule:function(expression,selection,identity){var $t,$t1,$t2,operatorExpression,serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,lefthand,righthand,newDivision,newAddition;return Bridge.hasValue(($t=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.BinaryOperatorExpression),operatorExpression=$t,$t))&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.add&&Bridge.hasValue(($t1=Bridge.as(operatorExpression.getLeft(),ThreeOneSevenBee.Model.Expression.Expressions.BinaryOperatorExpression),lefthand=$t1,$t1))&&Bridge.hasValue(($t2=Bridge.as(operatorExpression.getRight(),ThreeOneSevenBee.Model.Expression.Expressions.BinaryOperatorExpression),righthand=$t2,$t2))&&lefthand.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.divide&&righthand.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.divide&&ThreeOneSevenBee.Model.Expression.ExpressionBase.op_Equality(lefthand.getRight(),righthand.getRight())?(newDivision=Bridge.as(serializer.deserialize("a/b"),ThreeOneSevenBee.Model.Expression.Expressions.BinaryOperatorExpression),newAddition=Bridge.as(serializer.deserialize("a+b"),ThreeOneSevenBee.Model.Expression.Expressions.BinaryOperatorExpression),newAddition.setLeft(lefthand.getLeft()),newAddition.setRight(righthand.getLeft()),newDivision.setLeft(newAddition),newDivision.setRight(lefthand.getRight()),identity.v=newDivision,!0):(identity.v=null,!1)},fractionMultiplyRule:function(expression,selection,identity){var $t,$t1,$t2,operatorExpression,serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,lefthand,righthand,division;return Bridge.hasValue(($t=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.BinaryOperatorExpression),operatorExpression=$t,$t))&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.multiply&&Bridge.hasValue(($t1=Bridge.as(operatorExpression.getLeft(),ThreeOneSevenBee.Model.Expression.Expressions.BinaryOperatorExpression),lefthand=$t1,$t1))&&Bridge.hasValue(($t2=Bridge.as(operatorExpression.getRight(),ThreeOneSevenBee.Model.Expression.Expressions.BinaryOperatorExpression),righthand=$t2,$t2))&&lefthand.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.divide&&righthand.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.divide?(division=Bridge.as(serializer.deserialize("a/b"),ThreeOneSevenBee.Model.Expression.Expressions.BinaryOperatorExpression),division.setLeft(serializer.deserialize(serializer.serialize(lefthand.getLeft())+"*"+serializer.serialize(righthand.getLeft()))),division.setRight(serializer.deserialize(serializer.serialize(lefthand.getRight())+"*"+serializer.serialize(righthand.getRight()))),identity.v=division,!0):(identity.v=null,!1)},sameVariableDifferentExpMultiplyRule:function(expression,selection,identity){var $t,$t1,$t2,operatorExpression,serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,lefthand,righthand;return Bridge.hasValue(($t=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.BinaryOperatorExpression),operatorExpression=$t,$t))&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.multiply&&Bridge.hasValue(($t1=Bridge.as(operatorExpression.getLeft(),ThreeOneSevenBee.Model.Expression.Expressions.BinaryOperatorExpression),lefthand=$t1,$t1))&&Bridge.hasValue(($t2=Bridge.as(operatorExpression.getRight(),ThreeOneSevenBee.Model.Expression.Expressions.BinaryOperatorExpression),righthand=$t2,$t2))&&lefthand.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.power&&righthand.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.power&&ThreeOneSevenBee.Model.Expression.ExpressionBase.op_Equality(lefthand.getLeft(),righthand.getLeft())?(identity.v=serializer.deserialize(serializer.serialize(lefthand.getLeft())+"^"+serializer.serialize(lefthand.getRight())+"+"+serializer.serialize(righthand.getRight())),!0):(identity.v=null,!1)},variableWithTwoExponent:function(expression,selection,identity){var $t,$t1,operatorExpression,serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,lefthand;return Bridge.hasValue(($t=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.BinaryOperatorExpression),operatorExpression=$t,$t))&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.power&&Bridge.hasValue(($t1=Bridge.as(operatorExpression.getLeft(),ThreeOneSevenBee.Model.Expression.Expressions.BinaryOperatorExpression),lefthand=$t1,$t1))&&lefthand.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.power?(identity.v=serializer.deserialize(serializer.serialize(lefthand.getLeft())+"^"+serializer.serialize(lefthand.getRight())+"*"+serializer.serialize(operatorExpression.getRight())),!0):(identity.v=null,!1)},squareSentenceRule:function(expression,selection,identity){var $t,$t1,operatorExpression,serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,lefthand;return Bridge.hasValue(($t=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.BinaryOperatorExpression),operatorExpression=$t,$t))&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.power&&Bridge.String.equals(operatorExpression.getRight().getValue(),"2")&&Bridge.hasValue(($t1=Bridge.as(operatorExpression.getLeft(),ThreeOneSevenBee.Model.Expression.Expressions.BinaryOperatorExpression),lefthand=$t1,$t1))&&lefthand.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.add?(identity.v=serializer.deserialize(serializer.serialize(lefthand.getLeft())+"^"+serializer.serialize(operatorExpression.getRight())+"+"+serializer.serialize(lefthand.getRight())+"^"+serializer.serialize(operatorExpression.getRight())+"+"+serializer.serialize(operatorExpression.getRight())+"*"+serializer.serialize(lefthand.getLeft())+"*"+serializer.serialize(lefthand.getRight())),!0):(identity.v=null,!1)},squareRootAndPowerRule:function(expression,selection,identity){var $t,$t1,$t2,functionExpression,serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,operatorExpression,delimiterExpression;return Bridge.hasValue(($t=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.FunctionExpression),functionExpression=$t,$t))&&functionExpression.getFunction()==="sqrt"&&Bridge.hasValue(($t1=Bridge.as(functionExpression.getExpression(),ThreeOneSevenBee.Model.Expression.Expressions.DelimiterExpression),delimiterExpression=$t1,$t1))&&Bridge.hasValue(($t2=Bridge.as(delimiterExpression.getExpression(),ThreeOneSevenBee.Model.Expression.Expressions.BinaryOperatorExpression),operatorExpression=$t2,$t2))&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.power&&Bridge.String.equals(operatorExpression.getRight().getValue(),"2")?(identity.v=operatorExpression.getLeft(),!0):(identity.v=null,!1)},fractionVariableMultiplyRule:function(expression,selection,identity){var $t,$t1,operatorExpression,serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,righthand;return Bridge.hasValue(($t=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.BinaryOperatorExpression),operatorExpression=$t,$t))&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.multiply&&Bridge.hasValue(($t1=Bridge.as(operatorExpression.getRight(),ThreeOneSevenBee.Model.Expression.Expressions.BinaryOperatorExpression),righthand=$t1,$t1))&&righthand.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.divide?(identity.v=serializer.deserialize("a/"+serializer.serialize(righthand.getLeft())),identity.v.replace(serializer.deserialize("a"),serializer.deserialize(serializer.serialize(operatorExpression.getLeft())+"*"+serializer.serialize(righthand.getLeft()))),!0):(identity.v=null,!1)},multiplyVariableIntoParentheses:function(expression,selection,identity){var $t,$t1,operatorExpression,serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,righthand;return Bridge.hasValue(($t=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.BinaryOperatorExpression),operatorExpression=$t,$t))&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.multiply&&Bridge.hasValue(($t1=Bridge.as(operatorExpression.getRight(),ThreeOneSevenBee.Model.Expression.Expressions.BinaryOperatorExpression),righthand=$t1,$t1))&&righthand.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.multiply?(identity.v=serializer.deserialize(serializer.serialize(operatorExpression.getLeft())+"*"+serializer.serialize(righthand.getLeft())+"+"+serializer.serialize(operatorExpression.getLeft())+"*"+serializer.serialize(righthand.getRight())),!0):(identity.v=null,!1)},powerOfVariablesMultiplied:function(expression,selection,identity){var $t,$t1,operatorExpression,serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,lefthand;return Bridge.hasValue(($t=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.BinaryOperatorExpression),operatorExpression=$t,$t))&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.power&&Bridge.hasValue(($t1=Bridge.as(operatorExpression.getRight(),ThreeOneSevenBee.Model.Expression.Expressions.BinaryOperatorExpression),lefthand=$t1,$t1))&&lefthand.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.multiply?(identity.v=serializer.deserialize(serializer.serialize(lefthand.getLeft())+"^"+serializer.serialize(operatorExpression.getRight())+"+"+serializer.serialize(lefthand.getRight())+"^"+serializer.serialize(operatorExpression.getRight())),!0):(identity.v=null,!1)},multiplyingWithOneRule:function(expression,selection,identity){var $t,operatorExpression,serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer;if(Bridge.hasValue(($t=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.BinaryOperatorExpression),operatorExpression=$t,$t))){if(operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.multiply&&Bridge.String.equals(operatorExpression.getLeft().getValue(),"1"))return identity.v=operatorExpression.getRight(),!0;if(operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.multiply&&Bridge.String.equals(operatorExpression.getRight().getValue(),"1"))return identity.v=operatorExpression.getLeft(),!0}return identity.v=null,!1},denumeratorIsOneRule:function(expression,selection,identity){var $t,operatorExpression,serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer;return Bridge.hasValue(($t=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.BinaryOperatorExpression),operatorExpression=$t,$t))&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.divide&&Bridge.String.equals(operatorExpression.getRight().getValue(),"1")?(identity.v=operatorExpression.getLeft(),!0):(identity.v=null,!1)},numeratorIsZero:function(expression,selection,identity){var $t,operatorExpression,serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer;return Bridge.hasValue(($t=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.BinaryOperatorExpression),operatorExpression=$t,$t))&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.divide&&Bridge.String.equals(operatorExpression.getLeft().getValue(),"0")?(identity.v=serializer.deserialize("0"),!0):(identity.v=null,!1)},removingUnaryMinusInDivisionRule:function(expression,selection,identity){var $t,operatorExpression,serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer,terminal,terminal2;return Bridge.hasValue(($t=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.BinaryOperatorExpression),operatorExpression=$t,$t))&&operatorExpression.getType()===ThreeOneSevenBee.Model.Expression.Expressions.OperatorType.divide&&Bridge.is(operatorExpression.getLeft(),ThreeOneSevenBee.Model.Expression.Expressions.UnaryMinusExpression)&&Bridge.is(operatorExpression.getRight(),ThreeOneSevenBee.Model.Expression.Expressions.UnaryMinusExpression)?(terminal=Bridge.as(operatorExpression.getLeft(),ThreeOneSevenBee.Model.Expression.Expressions.UnaryMinusExpression),terminal2=Bridge.as(operatorExpression.getRight(),ThreeOneSevenBee.Model.Expression.Expressions.UnaryMinusExpression),identity.v=serializer.deserialize(serializer.serialize(terminal.getExpression())+"/"+terminal2.getExpression()),!0):(identity.v=null,!1)},doubleMinusEqualsPlus:function(expression,selection,identity){var $t,$t1,operatorExpression,unary1,serializer=new ThreeOneSevenBee.Model.Expression.ExpressionSerializer;return Bridge.hasValue(($t=Bridge.as(expression,ThreeOneSevenBee.Model.Expression.Expressions.UnaryMinusExpression),operatorExpression=$t,$t))&&Bridge.hasValue(($t1=Bridge.as(operatorExpression.getExpression(),ThreeOneSevenBee.Model.Expression.Expressions.UnaryMinusExpression),unary1=$t1,$t1))?(identity.v=serializer.deserialize(serializer.serialize(unary1.getExpression())),!0):(identity.v=null,!1)}}});var $_={};Bridge.ns("ThreeOneSevenBee.Model.Expression.ExpressionRules.Rules",$_);Bridge.apply($_.ThreeOneSevenBee.Model.Expression.ExpressionRules.Rules,{f1:function(e){return e!==-1}});Bridge.init()})(this);